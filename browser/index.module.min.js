var o={d:(t,r)=>{for(var n in r)o.o(r,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(o,t)=>Object.prototype.hasOwnProperty.call(o,t)},t={};o.d(t,{d:()=>e});class r{constructor(o){this.datum=o,this.color=1}}function n(o){return!!o&&1===o.color}class e{constructor(o,t=!0,r){if(this.compare=o,this.duplicatesAllowed=t,this.getMinNode=this.getMinOrMaxNode(-1),this.getMaxNode=this.getMinOrMaxNode(1),this.root=null,r)for(const o of r)this.insert(o)}isEmpty(){return!this.root}find(o){const t=this;let r=this.root;for(;r;){const n=t.compare(o,r.datum);if(0===n)return r;r=r[n>0?1:-1]}}toArrayInOrder(){const o=[];return function t(r){r&&(t(r[-1]),o.push(r.datum),t(r[1]))}(this.root),o}insert(o){const t=this;t.root=function o(e,c){if(!e)return new r(c);let s=t.compare(c,e.datum);if(0===s&&(t.duplicatesAllowed?s=1:e.datum=c),0!==s){const t=s>0?1:-1;e[t]=o(e[t],c),e[t].parent=e}return n(e[1])&&!n(e[-1])&&(e=i(-1,e)),n(e[-1])&&n(e[-1][-1])&&(e=i(1,e)),n(e[-1])&&n(e[1])&&u(e),e}(t.root,o),t.root.color=-1,t.root.parent=void 0}remove(o,t=!0){const r=this;null!==r.root&&(r.root=function o(t,e){let a=r.compare(e,t.datum);return a<0&&!t[-1]||a>0&&!t[1]?t:a<0?(n(t[-1])||n(t[-1][-1])||(t=s(t)),t[-1]=o(t[-1],e),t[-1]&&(t[-1].parent=t),d(t)):(n(t[-1])&&(t=i(1,t),a=r.compare(e,t.datum)),0!==a||t[1]?(n(t[1])||n(t[1][-1])||(t=function(o){return u(o),n(o[-1][-1])&&u(o=i(1,o)),o}(t),a=r.compare(e,t.datum)),0===a?(t.datum=r.min(t[1]),t[1]=c(t[1])):t[1]=o(t[1],e),t[1]&&(t[1].parent=t),d(t)):null)}(r.root,o),r.root&&(r.root.color=-1,r.root.parent=void 0))}findBounds(o){const t=this;let r=t.root;const n=[void 0,void 0];if(null===r)return n;for(;r;){const e=t.compare(o,r.datum);e>=0?n[0]=r:n[1]=r,r=r[e>=0?1:-1]}return n}findBoundsExcl(o){const t=this,r=t.root,n=[void 0,void 0];return null===r||function r(e){for(;e;){const i=t.compare(o,e.datum);if(0===i)return r(e[-1]),void r(e[1]);i>0?n[0]=e:i<0&&(n[1]=e),e=e[i>0?1:-1]}}(r),n}findAllInOrder(o){const t=this,r=[];return function n(e){for(;e;){const i=t.compare(o,e.datum);if(0===i)return n(e[-1]),r.push(e),void n(e[1]);e=e[i>0?1:-1]}}(t.root),r}getMinOrMaxNode(o){return t=>{if(void 0===t&&(t=this.root),t){for(;t[o];)t=t[o];return t}}}min(o){void 0===o&&(o=this.root);const t=this.getMinNode(o);if(void 0!==t)return t.datum}max(o){void 0===o&&(o=this.root);const t=this.getMaxNode(o);if(void 0!==t)return t.datum}}function i(o,t){const r=t[-o];return t[-o]=r[o],r[o]&&(r[o].parent=t),r[o]=t,t.parent=r,r.color=t.color,t.color=1,r}function c(o){return o[-1]?(n(o[-1])||n(o[-1][-1])||(o=s(o)),o[-1]=c(o[-1]),o[-1]&&(o[-1].parent=o),d(o)):null}function u(o){o.color=-o.color,o[-1].color=-o[-1].color,o[1].color=-o[1].color}function s(o){if(u(o),n(o[1][-1])){const t=i(1,o[1]);o[1]=t,t.parent=o,u(o=i(-1,o))}return o}function d(o){return n(o[1])&&(o=i(-1,o)),n(o[-1])&&n(o[-1][-1])&&(o=i(1,o)),n(o[-1])&&n(o[1])&&u(o),o}var a=t.d;export{a as LlRbTree};