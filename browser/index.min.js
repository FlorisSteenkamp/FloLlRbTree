var FloLlRbTree;(()=>{"use strict";var o={d:(t,r)=>{for(var n in r)o.o(r,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(o,t)=>Object.prototype.hasOwnProperty.call(o,t),r:o=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(o,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(o,"__esModule",{value:!0})}},t={};o.r(t),o.d(t,{LlRbTree:()=>i});class r{constructor(o){this.datum=o,this.color=1}}const n=-1;function e(o){return!!o&&1===o.color}class i{constructor(o,t=!0,r){if(this.compare=o,this.duplicatesAllowed=t,this.getMinNode=this.getMinOrMaxNode(n),this.getMaxNode=this.getMinOrMaxNode(1),this.root=null,r)for(const o of r)this.insert(o)}isEmpty(){return!this.root}find(o){const t=this;let r=this.root;for(;r;){const e=t.compare(o,r.datum);if(0===e)return r;r=r[e>0?1:n]}}toArrayInOrder(){const o=[];return function t(r){r&&(t(r[-1]),o.push(r.datum),t(r[1]))}(this.root),o}insert(o){const t=this;t.root=function o(i,c){if(!i)return new r(c);let d=t.compare(c,i.datum);if(0===d&&(t.duplicatesAllowed?d=1:i.datum=c),0!==d){const t=d>0?1:n;i[t]=o(i[t],c),i[t].parent=i}return e(i[1])&&!e(i[-1])&&(i=u(n,i)),e(i[-1])&&e(i[-1][-1])&&(i=u(1,i)),e(i[-1])&&e(i[1])&&s(i),i}(t.root,o),t.root.color=-1,t.root.parent=void 0}remove(o,t=!0){const r=this;null!==r.root&&(r.root=function o(t,n){let i=r.compare(n,t.datum);return i<0&&!t[-1]||i>0&&!t[1]?t:i<0?(e(t[-1])||e(t[-1][-1])||(t=d(t)),t[-1]=o(t[-1],n),t[-1]&&(t[-1].parent=t),l(t)):(e(t[-1])&&(t=u(1,t),i=r.compare(n,t.datum)),0!==i||t[1]?(e(t[1])||e(t[1][-1])||(t=function(o){return s(o),e(o[-1][-1])&&s(o=u(1,o)),o}(t),i=r.compare(n,t.datum)),0===i?(t.datum=r.min(t[1]),t[1]=c(t[1])):t[1]=o(t[1],n),t[1]&&(t[1].parent=t),l(t)):null)}(r.root,o),r.root&&(r.root.color=-1,r.root.parent=void 0))}findBounds(o){const t=this;let r=t.root;const e=[void 0,void 0];if(null===r)return e;for(;r;){const i=t.compare(o,r.datum);i>=0?e[0]=r:e[1]=r,r=r[i>=0?1:n]}return e}findBoundsExcl(o){const t=this,r=t.root,e=[void 0,void 0];return null===r||function r(i){for(;i;){const u=t.compare(o,i.datum);if(0===u)return r(i[-1]),void r(i[1]);u>0?e[0]=i:u<0&&(e[1]=i),i=i[u>0?1:n]}}(r),e}findAllInOrder(o){const t=this,r=[];return function e(i){for(;i;){const u=t.compare(o,i.datum);if(0===u)return e(i[-1]),r.push(i),void e(i[1]);i=i[u>0?1:n]}}(t.root),r}getMinOrMaxNode(o){return t=>{if(void 0===t&&(t=this.root),t){for(;t[o];)t=t[o];return t}}}min(o){void 0===o&&(o=this.root);const t=this.getMinNode(o);if(void 0!==t)return t.datum}max(o){void 0===o&&(o=this.root);const t=this.getMaxNode(o);if(void 0!==t)return t.datum}}function u(o,t){const r=t[-o];return t[-o]=r[o],r[o]&&(r[o].parent=t),r[o]=t,t.parent=r,r.color=t.color,t.color=1,r}function c(o){return o[-1]?(e(o[-1])||e(o[-1][-1])||(o=d(o)),o[-1]=c(o[-1]),o[-1]&&(o[-1].parent=o),l(o)):null}function s(o){o.color=-o.color,o[-1].color=-o[-1].color,o[1].color=-o[1].color}function d(o){if(s(o),e(o[1][-1])){const t=u(1,o[1]);o[1]=t,t.parent=o,s(o=u(n,o))}return o}function l(o){return e(o[1])&&(o=u(n,o)),e(o[-1])&&e(o[-1][-1])&&(o=u(1,o)),e(o[-1])&&e(o[1])&&s(o),o}FloLlRbTree=t})();