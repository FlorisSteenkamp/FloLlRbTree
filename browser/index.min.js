var FloLlRbTree;(()=>{"use strict";var t={d:(o,r)=>{for(var e in r)t.o(r,e)&&!t.o(o,e)&&Object.defineProperty(o,e,{enumerable:!0,get:r[e]})},o:(t,o)=>Object.prototype.hasOwnProperty.call(t,o),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},o={};t.r(o),t.d(o,{LlRbTree:()=>n});class r{constructor(t,o){this.datum=o?[t]:t,this.color=1}}function e(t){return!!t&&1===t.color}class n{constructor(t,o,r=!0){this.getMinNode=this.getMinOrMaxNode(0),this.getMaxNode=this.getMinOrMaxNode(1);const e=this;if(e.setComparator(t,r),e.replaceDups=r,e.root=null,o)for(let t of o)e.insert(t)}setComparator(t,o){this.compare=o?t:(o,r)=>t(o,r[0])}isEmpty(){return!this.root}find(t){const o=this;let r=this.root;for(;r;){let e=o.compare(t,r.datum);if(0===e)return r;r=r[e>0?1:0]}}toArrayInOrder(){let t=[];return function o(r){r&&(o(r[0]),t.push(r.datum),o(r[1]))}(this.root),t}insert(t){const o=this;o.root=function t(n,i){if(!n)return new r(i,!o.replaceDups);let a=o.compare(i,n.datum);if(0===a)o.replaceDups?n.datum=i:n.datum.push(i);else{let o=a>0?1:0;n[o]=t(n[o],i),n[o].parent=n}return e(n[1])&&!e(n[0])&&(n=u(0,n)),e(n[0])&&e(n[0][0])&&(n=u(1,n)),e(n[0])&&e(n[1])&&c(n),n}(o.root,t),o.root.color=0,o.root.parent=void 0}remove(t,o=!0){const r=this;r.root=function t(n,l){let p=r.compare(l,n.datum);return!r.replaceDups&&0===p&&!o&&n.datum.length>1?(i(l,n.datum),n):p<0&&!n[0]||p>0&&!n[1]?n:p<0?(e(n[0])||e(n[0][0])||(n=s(n)),n[0]=t(n[0],l),n[0]&&(n[0].parent=n),d(n)):e(n[0])&&(n=u(1,n),p=r.compare(l,n.datum),!r.replaceDups&&0===p&&!o&&n.datum.length>1)?(i(l,n.datum),n):0!==p||n[1]?e(n[1])||e(n[1][0])||(n=function(t){return c(t),e(t[0][0])&&c(t=u(1,t)),t}(n),p=r.compare(l,n.datum),r.replaceDups||0!==p||o||!(n.datum.length>1))?(0===p?(n.datum=r.min(n[1]),n[1]=a(n[1])):n[1]=t(n[1],l),n[1]&&(n[1].parent=n),d(n)):(i(l,n.datum),n):null}(r.root,t),r.root&&(r.root.color=0,r.root.parent=void 0)}findBounds(t){const o=this;let r=o.root,e=[void 0,void 0];if(null===r)return e;for(;r;){const n=o.compare(t,r.datum);n>=0?e[0]=r:e[1]=r,r=r[n>=0?1:0]}return e}findBoundsExcl(t){const o=this;let r=o.root,e=[void 0,void 0];return null===r||function r(n){for(;n;){let i=o.compare(t,n.datum);if(0===i)return r(n[0]),void r(n[1]);i>0?e[0]=n:i<0&&(e[1]=n),n=n[i>0?1:0]}}(r),e}findAllInOrder(t){const o=this;let r=[];return function e(n){for(;n;){let i=o.compare(t,n.datum);if(0===i)return e(n[0]),r.push(n),void e(n[1]);n=n[i>0?1:0]}}(o.root),r}getMinOrMaxNode(t){return o=>{if(void 0===o&&(o=this.root),o){for(;o[t];)o=o[t];return o}}}min(t){void 0===t&&(t=this.root);const o=this.getMinNode(t);if(void 0!==o)return o.datum}max(t){void 0===t&&(t=this.root);const o=this.getMaxNode(t);if(void 0!==o)return o.datum}}function i(t,o){let r=o.indexOf(t);-1!==r&&o.splice(r,1)}function u(t,o){const r=t?0:1,e=o[r];return o[r]=e[t],e[t]&&(e[t].parent=o),e[t]=o,o.parent=e,e.color=o.color,o.color=1,e}function a(t){return t[0]?(e(t[0])||e(t[0][0])||(t=s(t)),t[0]=a(t[0]),t[0]&&(t[0].parent=t),d(t)):null}function l(t){return(t+1)%2}function c(t){t.color=l(t.color),t[0].color=l(t[0].color),t[1].color=l(t[1].color)}function s(t){if(c(t),e(t[1][0])){let o=u(1,t[1]);t[1]=o,o.parent=t,c(t=u(0,t))}return t}function d(t){return e(t[1])&&(t=u(0,t)),e(t[0])&&e(t[0][0])&&(t=u(1,t)),e(t[0])&&e(t[1])&&c(t),t}FloLlRbTree=o})();